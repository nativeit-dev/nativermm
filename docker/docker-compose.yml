version: "3.7"

# networks
networks:
  proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  api-db: null
  redis: null
  mesh-db: null

# docker managed persistent volumes
volumes:
  native_data: null
  postgres_data: null
  mongo_data: null
  mesh_data: null
  redis_data: null

services:
  # postgres database for api service
  nativermm-postgres:
    container_name: nativermm-postgres
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_DB: nativermm
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api-db

  # redis container for celery tasks
  nativermm-redis:
    container_name: nativermm-redis
    image: redis:6.0-alpine
    user: 1000:1000
    command: redis-server
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - redis

  # used to initialize the docker environment
  nativermm-init:
    container_name: nativermm-init
    image: ${IMAGE_REPO}nativermm:${VERSION}
    restart: on-failure
    command: [ "nativermm-init" ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_USER: ${MESH_USER}
      MESH_HOST: ${MESH_HOST}
      NATIVERMM_USER: ${NATIVERMM_USER}
      NATIVERMM_PASS: ${NATIVERMM_PASS}
    depends_on:
      - nativermm-postgres
      - nativermm-meshcentral
      - nativermm-redis
    networks:
      - api-db
      - proxy
      - redis
    volumes:
      - native_data:/opt/nativermm
      - mesh_data:/meshcentral-data
      - mongo_data:/mongo/data/db
      - redis_data:/redis/data

  # nats
  nativermm-nats:
    container_name: nativermm-nats
    image: ${IMAGE_REPO}nativermm-nats:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      API_HOST: ${API_HOST}
    ports:
      - "4222:4222"
    volumes:
      - native_data:/opt/nativermm
    networks:
      api-db: null
      proxy:
        aliases:
          - ${API_HOST}

  # meshcentral container
  nativermm-meshcentral:
    container_name: nativermm-meshcentral
    image: ${IMAGE_REPO}nativermm-meshcentral:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      MESH_HOST: ${MESH_HOST}
      MESH_USER: ${MESH_USER}
      MESH_PASS: ${MESH_PASS}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MESH_PERSISTENT_CONFIG: ${MESH_PERSISTENT_CONFIG}
    networks:
      proxy:
        aliases:
          - ${MESH_HOST}
      mesh-db: null
    volumes:
      - native_data:/opt/nativermm
      - mesh_data:/home/node/app/meshcentral-data
    depends_on:
      - nativermm-mongodb

  # mongodb container for meshcentral
  nativermm-mongodb:
    container_name: nativermm-mongodb
    image: mongo:4.4
    user: 1000:1000
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: meshcentral
    networks:
      - mesh-db
    volumes:
      - mongo_data:/data/db

  # container that hosts vue frontend
  nativermm-frontend:
    container_name: nativermm-frontend
    image: ${IMAGE_REPO}nativermm-frontend:${VERSION}
    user: 1000:1000
    restart: always
    networks:
      - proxy
    volumes:
      - native_data:/opt/nativermm
    environment:
      API_HOST: ${API_HOST}

  # container for django backend
  nativermm-backend:
    container_name: nativermm-backend
    image: ${IMAGE_REPO}nativermm:${VERSION}
    user: 1000:1000
    command: [ "nativermm-backend" ]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - native_data:/opt/nativermm
    depends_on:
      - nativermm-postgres

  # container for django websockets connections
  nativermm-websockets:
    container_name: nativermm-websockets
    image: ${IMAGE_REPO}nativermm:${VERSION}
    user: 1000:1000
    command: [ "nativermm-websockets" ]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - native_data:/opt/nativermm
    depends_on:
      - nativermm-postgres
      - nativermm-backend

  # container for nativermm reverse proxy
  nativermm-nginx:
    container_name: nativermm-nginx
    image: ${IMAGE_REPO}nativermm-nginx:${VERSION}
    user: 1000:1000
    restart: always
    environment:
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_HOST: ${MESH_HOST}
      CERT_PUB_KEY: ${CERT_PUB_KEY}
      CERT_PRIV_KEY: ${CERT_PRIV_KEY}
    networks:
      proxy:
        ipv4_address: 172.20.0.20
    ports:
      - "80:8080"
      - "443:4443"
    volumes:
      - native_data:/opt/nativermm

  # container for celery worker service
  nativermm-celery:
    container_name: nativermm-celery
    image: ${IMAGE_REPO}nativermm:${VERSION}
    user: 1000:1000
    command: [ "nativermm-celery" ]
    restart: always
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - native_data:/opt/nativermm
    depends_on:
      - nativermm-postgres
      - nativermm-redis

  # container for celery beat service
  nativermm-celerybeat:
    container_name: nativermm-celerybeat
    image: ${IMAGE_REPO}nativermm:${VERSION}
    user: 1000:1000
    command: [ "nativermm-celerybeat" ]
    restart: always
    networks:
      - proxy
      - redis
      - api-db
    volumes:
      - native_data:/opt/nativermm
    depends_on:
      - nativermm-postgres
      - nativermm-redis
